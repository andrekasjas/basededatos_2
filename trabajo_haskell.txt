{- 
   Andres Fernando Mogollon 		1007618597

   26. Construya un programa en haskell que dada una lista de listas, devuelva una lista de pares compuestos por el menor
   y el mayor de los elementos de cada una de las listas así:
   mayormenor [ [2,1,3,4 ] , [6, 4,3,5] , [1,1,1,1] ]
   [ (1,4) , (3,6)  , (1,1) ]
	NOTA: LA LISTA DE LISTAS NO PUEDE TENER UNA LISTA VACIA, YA QUE NO HAY MENOR
	NI MAYOR Y GENERARIA ERROR
-}
-- ***************** Versión 1 ********************
-- ******* DIFERENCIA FUE RESULETO CON LET *********
mayor1::[Int]->Int
mayor1  [x]      = x
mayor1  (cab:col)= let
                    m=mayor1 col
                  in
                   if cab > m then cab else m

menor1::[Int]->Int
menor1  [x]      = x
menor1  (cab:col)= let
                    m=menor1 col
                  in
                   if cab < m then cab else m

mayoresmenores1::[[Int]]->[(Int,Int)]
mayoresmenores1    []      = []
mayoresmenores1  (cab:col) = let
                              w=(menor1 cab, mayor1 cab)
                            in
                              w:(mayoresmenores1 col)



-- ***************** Versión 2 ********************
-- ******* DIFERENCIA FUE RESULETO CON GUARDAS *********
mayor2::[Int]->Int 
mayor2 (cab:col)  | (cab:col)==cab:[] = cab
	          | otherwise =let
                   		 m=mayor2 col
                  	       in
                   		 if cab > m then cab else m
menor2::[Int]->Int
menor2 (cab:col)  | (cab:col)==cab:[] = cab
	          | otherwise =let
                   		 m=menor2 col
                  	       in
                   		 if cab < m then cab else m

mayoresmenores2::[[Int]]->[(Int,Int)]
mayoresmenores2   x | x==[] = []
		    | otherwise     =let
						(cab:col)=x
                              			w=(menor2 cab, mayor2 cab)
                            		     in
                              			w:(mayoresmenores2 col)



-- ***************** Versión 3 ********************
-- ******* DIFERENCIA FUE RESULETO CON WHERE *********
mayor3::[Int]->Int
mayor3 (cab:col)  | (cab:col)==cab:[] = cab
	          | otherwise =if cab > m then cab else m
				where
                   		 m=mayor3 col
menor3::[Int]->Int
menor3 (cab:col)  | (cab:col)==cab:[] = cab
	          | otherwise =if cab < m then cab else m
				where
                   		 m=menor3 col
                   		 

mayoresmenores3::[[Int]]->[(Int,Int)]
mayoresmenores3   x | x==[] = []
		    | otherwise     =w:(mayoresmenores3 col)
					where
						(cab:col)=x
                            			w=(menor3 cab, mayor3 cab)
                              			


-- ***************** Versión 4 ********************
-- ***** DIFERENCIA FUE RESUELTO CON FUNCIONES PREDEFINIDAS (minimum y maximum)*******
maymen:: [Int]->(Int,Int)
maymen   x    =(minimum x,maximum x)

mayoresmenores4::[[Int]]->[(Int,Int)]
mayoresmenores4  []        =  []
mayoresmenores4  (cab:col) = (maymen cab):mayoresmenores4 col




-- ***************** Versión 5 ********************
-- ******* DIFERENCIA FUE RESULETO GENERALIZADO Y CON LISTA POR COMPRENSION *********
maymen2:: Ord a=>[a]->(a,a)
maymen2   x    =(minimum x,maximum x)

mayoresmenores5::Ord a =>[[a]]->[(a,a)]
mayoresmenores5   x     =[maymen2 y|y<-x]


